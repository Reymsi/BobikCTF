import asyncio
import json
import os
import time
import requests
from typing import Optional
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.exceptions import TelegramBadRequest
from dotenv import load_dotenv

load_dotenv()


# ---- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ----
TOKEN_TG = os.getenv("TOKEN_TG")          
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY") 

bot = Bot(token=TOKEN_TG)
dp = Dispatcher()

# ---- –ü–∞–º—è—Ç—å –∏ —Ä–µ–∂–∏–º—ã ----
user_memory = {}
user_mode = {}        # {user_id: "training" | "ctf"} –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é None => –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç

# ---- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ + –æ—á–∏—Å—Ç–∫–∞ + help ----
kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üü¢ –û–±—É—á–µ–Ω–∏–µ"), KeyboardButton(text="üî¥ –†–µ–∂–∏–º CTF")],
        [KeyboardButton(text="/help"), KeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å")],
    ],
    resize_keyboard=True
)

# ---- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----
def openrouter_request(messages):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π POST –∫ OpenRouter. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –±—Ä–æ—Å–∞–µ—Ç Exception."""
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://example.com",
        "X-Title": "CTF Assistant"
    }
    payload = {
        "model": "openai/gpt-4o",
        "messages": messages
    }
    r = requests.post(url, headers=headers, data=json.dumps(payload), timeout=30)
    r.raise_for_status()
    j = r.json()
    try:
        return j["choices"][0]["message"]["content"].strip()
    except Exception:
        raise RuntimeError("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenRouter: " + str(j))

def append_history(user_id: int, role: str, content: str, limit=10):
    hist = user_memory.get(user_id, [])
    hist.append({"role": role, "content": content})
    user_memory[user_id] = hist[-limit:]

def build_system_role(mode: Optional[str]) -> str:
    if mode == "training":
        return (
            "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ CTF. "
            "–û–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Å—Ç—ã–º –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º, –¥–æ—Å–∫–æ–Ω–∞–ª—å–Ω–æ –∏ –ø–æ—à–∞–≥–æ–≤–æ. "
            "–ü–æ–∫–∞–∑—ã–≤–∞–π –ø—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏/—Å–∞–π—Ç–µ. "
            "–£–ø—Ä–æ—â–∞–π, –Ω–æ –Ω–µ –æ–ø—É—Å–∫–∞–π –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏. –ë–µ–∑ –ø–∞—Ñ–æ—Å–∞, —Ç–æ–ª—å–∫–æ –ø–æ –¥–µ–ª—É. "
            "–û–±—â–∞–π—Å—è —Å–≤–æ–±–æ–¥–Ω–æ –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç –ª–µ—Ç 20-—Ç–∏, –º–∏–Ω–∏–º–∞–ª—å–Ω–æ —ç–º–æ–¥–∑–∏."
        )
    elif mode == "ctf":
        return (
            "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ CTF. –¢—ã –Ω–µ –æ–±—É—á–∞–µ—à—å ‚Äî —Ç—ã –¥–∞—ë—à—å —Ä–∞–±–æ—á–∏–µ —Ä–µ—à–µ–Ω–∏—è. "
            "–ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ—è—Å–Ω–∞ ‚Äî –∑–∞–¥–∞–π 1‚Äì3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–∞. "
            "–ü–∏—à–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —à–∞–≥–∏, –∫–æ–º–∞–Ω–¥—ã, –ø–æ–ª–µ–∑–Ω—ã–µ payload'—ã –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏—è. "
            "–ö—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤. "
            "–û–±—â–∞–π—Å—è —Å–≤–æ–±–æ–¥–Ω–æ –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç –ª–µ—Ç 20-—Ç–∏, –º–∏–Ω–∏–º–∞–ª—å–Ω–æ —ç–º–æ–¥–∑–∏."
        )
    else:
        return (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ CTF. "
            "–û—Ç–≤–µ—á–∞–π –ø–æ –¥–µ–ª—É: —á—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏ –∫–∞–∫ –ø—Ä–∏–º–µ–Ω—è—Ç—å —É—è–∑–≤–∏–º–æ—Å—Ç—å. "
            "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–π –ø—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥. "
            "–û–±—â–∞–π—Å—è –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ —Å—É—Ç–∏."
        )



@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "CTF Assistant –∑–∞–ø—É—â–µ–Ω. –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã.",
        reply_markup=kb
    )

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    text = (
        "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º:\n"
        "üü¢ –û–±—É—á–µ–Ω–∏–µ ‚Äî –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –ø—Ä–æ—Å—Ç–æ: —á—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å, –∫–∞–∫ —ç–∫—Å–ø–ª—É–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —É—è–∑–≤–∏–º–æ—Å—Ç—å, –ø—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥.\n"
        "üî¥ –†–µ–∂–∏–º CTF ‚Äî –¥–∞—é —Å—Ä–∞–∑—É —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫), –±–µ–∑ –æ–±—É—á–µ–Ω–∏—è. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –∑–∞–¥–∞—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è.\n\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è. –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –∑–∞–ø—É—Å–∫, –∫–Ω–æ–ø–∫–∞ '–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å' ‚Äî —É–¥–∞–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
    )
    await message.answer(text, reply_markup=kb)

@dp.message(lambda msg: msg.text and msg.text.lower() == "üßπ –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å")
async def clear_memory(message: types.Message):
    user_memory.pop(message.from_user.id, None)
    await message.answer("–ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞.", reply_markup=kb)

@dp.message(lambda msg: msg.text and msg.text == "üü¢ –û–±—É—á–µ–Ω–∏–µ")
async def set_training(message: types.Message):
    user_mode[message.from_user.id] = "training"
    await message.answer("–†–µ–∂–∏–º: –û–ë–£–ß–ï–ù–ò–ï (–æ–±—ä—è—Å–Ω—è—é –ø–æ–¥—Ä–æ–±–Ω–æ).", reply_markup=kb)

@dp.message(lambda msg: msg.text and msg.text == "üî¥ –†–µ–∂–∏–º CTF")
async def set_ctf(message: types.Message):
    user_mode[message.from_user.id] = "ctf"
    await message.answer("–†–µ–∂–∏–º: CTF (–¥–∞—é —Ä–µ—à–µ–Ω–∏–µ, —Å–ø—Ä–∞—à–∏–≤–∞—é —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏).", reply_markup=kb)


@dp.message()
async def generic_handler(message: types.Message):
    uid = message.from_user.id
    mode = user_mode.get(uid)

    if not message.text or not message.text.strip():
        await message.answer("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ –≤–æ–ø—Ä–æ—Å.", reply_markup=kb)
        return

    user_input = message.text.strip()

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ + –∏—Å—Ç–æ—Ä–∏—è
    system_role = build_system_role(mode)
    history = user_memory.get(uid, [])
    messages = [{"role": "system", "content": system_role}]
    messages.extend(history)
    messages.append({"role": "user", "content": user_input})

    # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.answer("–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...", reply_markup=kb)
    except TelegramBadRequest:
        pass

    # –ó–∞–ø—Ä–æ—Å –∫ OpenRouter
    try:
        answer = openrouter_request(messages)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò: {e}", reply_markup=kb)
        return

    if not answer:
        answer = "–ò–ò –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç ‚Äî –ø–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
    append_history(uid, "user", user_input)
    append_history(uid, "assistant", answer)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç, —Ä–∞–∑–¥–µ–ª—è—è –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    try:
        await message.answer(answer, reply_markup=kb)
    except TelegramBadRequest:
        if len(answer) > 4000:
            for i in range(0, len(answer), 4000):
                await message.answer(answer[i:i+4000])
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ—à–∏–±–∫–∞ Telegram).")

# ---- –ó–∞–ø—É—Å–∫ –ë–æ—Ç–∞ ----
async def main():
    print("Bobik –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
